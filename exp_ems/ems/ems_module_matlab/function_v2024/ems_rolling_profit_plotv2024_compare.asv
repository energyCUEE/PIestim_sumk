function [f_profit, f_Pnet, f_bat] = ems_rolling_profit_plotv2024_compare(all_sol, type)

    method_colors = lines(length(all_sol));
    method_names = {all_sol.methodname};

    f_profit = figure;
    t_profit = tiledlayout(4,4,'TileSpacing','loose','Padding','loose');
    ax = gobjects(1,16);

    % Loop over months
    for m = 3:12
        ax(m) = nexttile;
        hold on;
        for i = 1:length(all_sol)
            sol = all_sol(i).sol_rolling;
            PARAM = sol.PARAM;
            Pnet_ems = sol.Pnet;
            Pnet_actual = PARAM.NL_actual + sum(sol.Pchg,2) - sum(sol.Pdchg,2);
            res_hr = PARAM.Resolution / 60;
            profit_ems = res_hr * PARAM.normalize_factor * (max(0,-Pnet_ems).*PARAM.Sell_rate - max(0,Pnet_ems).*PARAM.Buy_rate);
            profit_actual = res_hr * PARAM.normalize_factor * (max(0,-Pnet_actual).*PARAM.Sell_rate - max(0,Pnet_actual).*PARAM.Buy_rate);
            cum_profit_ems = cumsum(profit_ems);
            cum_profit_actual = cumsum(profit_actual);

            idx = (month(sol.datetime) == m);
            % month_profit = cumsum([0; diff(cum_profit_ems(idx))]);
            month_profit = cumsum([0; diff(cum_profit_actual(idx))]);

            stairs(sol.datetime(idx), month_profit, 'Color', method_colors(i,:), 'LineWidth', 1.5);
        end
        title(['Month ', num2str(m)]);
        ylabel('Cum. profit [USD]');
        grid on;
        hold off;
    end

    % Yearly overview
    ax(13) = nexttile([1 4]);
    hold on;
    for i = 1:length(all_sol)
        sol = all_sol(i).sol_rolling;
        PARAM = sol.PARAM;
        Pnet_ems = sol.Pnet;
        Pnet_actual = PARAM.NL_actual + sum(sol.Pchg,2) - sum(sol.Pdchg,2);

        res_hr = PARAM.Resolution / 60;
        profit_ems = res_hr * PARAM.normalize_factor * (max(0,-Pnet_ems).*PARAM.Sell_rate - max(0,Pnet_ems).*PARAM.Buy_rate);
        profit_actual = res_hr * PARAM.normalize_factor * (max(0,-Pnet_actual).*PARAM.Sell_rate - max(0,Pnet_actual).*PARAM.Buy_rate);
        cum_profit_ems = cumsum(profit_ems);
        cum_profit_actual = cumsum(profit_actual);

        % stairs(sol.datetime, cum_profit_ems, 'Color', method_colors(i,:), 'LineWidth', 1.5);
        stairs(sol.datetime, cum_profit_actual, 'Color', method_colors(i,:), 'LineWidth', 1.5);
    end
    title('Year 2024');
    xlabel('Time');
    ylabel('Cum. profit [USD]');
    legend(method_names, 'Location', 'southoutside', 'Orientation', 'horizontal');
    grid on;
    hold off;

    sgtitle('Compare cumulative profit across all methods', 'FontWeight', 'bold');
    fontsize(0.45, 'centimeters');

    % Plot Pnet comparison
    f_Pnet = figure;
    % t_Pnet = tiledlayout(3,4,'TileSpacing','loose','Padding','loose');

    m = 3;
    idx = (month(sol.datetime) == m);
    hold on;
    for i = 1:length(all_sol)
        sol = all_sol(i).sol_rolling;
        PARAM = sol.PARAM;
        Pnet_ems = sol.Pnet;
        Pnet_actual = PARAM.NL_actual + sum(sol.Pchg,2) - sum(sol.Pdchg,2);
        % stairs(sol.datetime(idx), Pnet_ems(idx), 'Color', method_colors(i,:), 'LineWidth', 1.5);
        stairs(sol.datetime(idx), Pnet_actual(idx), 'Color', method_colors(i,:), 'LineWidth', 1.5);
    end
    hold off;
    title(['Month ', num2str(m)]);
    xlabel('Time');
    ylabel('Power [kW]');

    % for m = 3:12
    %     nexttile;
    %     hold on;
    %     for i = 1:length(all_sol)
    %         sol = all_sol(i).sol_rolling;
    %         PARAM = sol.PARAM;
    %         Pnet_ems = sol.Pnet;
    %         Pnet_actual = PARAM.NL_actual + sum(sol.Pchg,2) - sum(sol.Pdchg,2);
    % 
    %         idx = (month(sol.datetime) == m);
    %         stairs(sol.datetime(idx), Pnet_ems(idx), 'Color', method_colors(i,:), 'LineWidth', 1.5);
    %     end
    %     title(['Month ', num2str(m)]);
    %     xlabel('Time');
    %     ylabel('Power [kW]');
    %     grid on;
    %     hold off;
    % end

    legend(method_names, 'Location', 'southoutside', 'Orientation', 'horizontal');
    sgtitle('Compare P_{net} from all methods', 'FontWeight', 'bold');
    fontsize(0.5,'centimeters');


    % Plot Batt status comparison
    f_batt = figure;
    % t_Pnet = tiledlayout(3,4,'TileSpacing','loose','Padding','loose');

    m = 3;
    idx = (month(sol.datetime) == m);
    hold on;
    for i = 1:length(all_sol)
        sol = all_sol(i).sol_rolling;
        Pbatt = sum(sol.Pchg,2) - sum(sol.Pdchg,2);
        stairs(sol.datetime(idx), Pbatt(idx), 'Color', method_colors(i,:), 'LineWidth', 1.5);
    end
    hold off;
    title(['Month ', num2str(m)]);
    xlabel('Time');
    ylabel('Batt Power [kW]');

    legend(method_names, 'Location', 'southoutside', 'Orientation', 'horizontal');
    sgtitle('Compare Battery from all methods', 'FontWeight', 'bold');
    fontsize(0.5,'centimeters');

end


% function [f_profit, f_Pnet] = ems_rolling_profit_plotv2024_compare(sol_rolling)
% 
%     PARAM = sol_rolling.PARAM;
% 
%     Pnet_ems = sol_rolling.Pnet; %Pnet from planning EMS
%     Pnet_actual = PARAM.NL_actual + sum(sol_rolling.Pchg,2) - sum(sol_rolling.Pdchg,2);
% 
%     resolution_HR = PARAM.Resolution/60; % (min) Resolution in minutes
% 
%     profit_ems = resolution_HR * PARAM.normalize_factor * ( max(0,-Pnet_ems).*PARAM.Sell_rate - max(0,Pnet_ems).*PARAM.Buy_rate );
%     profit_actual = resolution_HR * PARAM.normalize_factor * ( max(0,-Pnet_actual).*PARAM.Sell_rate - max(0,Pnet_actual).*PARAM.Buy_rate );
% 
%     cum_profit_ems = cumsum(profit_ems);
%     cum_profit_actual = cumsum(profit_actual);
% 
% 
%     cum_error_percent = ( cum_profit_ems(end) - cum_profit_actual(end) ) / cum_profit_actual(end) * 100;
% 
%     disp(['Cumulative profit error = ', num2str(cum_error_percent), ' %']);
% 
% 
%     % -----------------------------
%     % Plot graph cumulative profit
%     % -----------------------------
%     f_profit = figure;
%     t_profit = tiledlayout(4,4,'TileSpacing','loose','Padding','loose');
% 
%     % Create an array to hold axes handles
%     ax = gobjects(1,16);
% 
%     for m = 3:12
%         % Extract data for each month
%         idx = (month(sol_rolling.datetime) == m);
% 
%         % Reset cumsum at the start of each month
%         month_cum_profit_ems = cumsum([0; diff(cum_profit_ems(idx))]); 
%         month_cum_profit_actual = cumsum([0; diff(cum_profit_actual(idx))]); 
% 
%         % Subplot for Expenditure Comparison
%         ax(m) = nexttile;
%         hold on;
%         stairs(sol_rolling.datetime(idx), month_cum_profit_ems, 'b', 'LineWidth', 1.5);
%         stairs(sol_rolling.datetime(idx), month_cum_profit_actual, 'r', 'LineWidth', 1.5);
%         title(['Month ', int2str(m)]);
%         legend('EMS', 'Actual')
%         ylabel('Cum. profit [USD]');
%         grid on;
%         hold off;
%     end
% 
%     % % Set the same y-axis limits for the first 3 rows (tiles 1 to 12)
%     % idx_1to12 = 1:12;
%     % y_mins = arrayfun(@(a) min(ax(a).YLim), idx_1to12);
%     % y_maxs = arrayfun(@(a) max(ax(a).YLim), idx_1to12);
%     % y_lim = [min(y_mins), max(y_maxs)];
%     % set(ax(idx_1to12), 'YLim', y_lim);
% 
% 
%     % Merge the last row (tile 13) to plot a full-year cumulative profit
%     ax(13) = nexttile([1 4]);
%     hold on;
%     stairs(sol_rolling.datetime, cum_profit_ems, 'b', 'LineWidth', 1.5);
%     stairs(sol_rolling.datetime, cum_profit_actual, 'r', 'LineWidth', 1.5);
% 
%     title('Year 2024');
%     xlabel('Time');
%     ylabel('Cum. profit [USD]');
%     legend('EMS', 'Actual')
%     grid on;
%     hold off;
% 
%     % Create a global legend outside the subplots
%     lgd = legend({'Ideal', 'EMS', 'Actual', 'No EMS'}, 'Location', 'southoutside', 'Orientation', 'horizontal');
%     lgd.Layout.Tile = 'south';
% 
%     sgtitle('Compare cumulative profit with actual and forecast data', 'FontWeight', 'bold');
% 
%     fontsize(0.45,'centimeters');
% 
%     % -------------------
%     % Plot graph Pnet
%     % -------------------
%     f_Pnet = figure;
%     t_Pnet = tiledlayout(3,4,'TileSpacing','loose','Padding','loose');
% 
%     for m = 3:12
%         idx = (month(sol_rolling.datetime) == m);
% 
%         nexttile;
%         hold on;
%         stairs(sol_rolling.datetime(idx), Pnet_ems(idx), 'b', 'LineWidth', 1.5);
%         stairs(sol_rolling.datetime(idx), Pnet_actual(idx), 'r', 'LineWidth', 1.5);
%         legend('EMS', 'Actual')
% 
%         title(['Month ', int2str(m)]);
%         xlabel('Time');
%         ylabel('Power [kW]');
%         grid on;
%     end
%     sgtitle('P_{net} with objective profit with actual data and forecast optimization solution', 'FontWeight', 'bold');
% 
%     fontsize(0.5,'centimeters')
% end